#include <jni.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <android/log.h>
#include <cstdlib>
#include <time.h>
#include <signal.h>

#define compsize 624
int result = 0;

int bytes[compsize] = {0};
unsigned char ref[compsize] = {0x55, 0x89, 0xE5, 0x53, 0x57, 0x56, 0x83, 0xE4, 0xF0, 0x81, 0xEC, 0x20, 0x01, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x5B, 0x81, 0xC3, 0x20, 0x26, 0x00, 0x00, 0x8B, 0x83, 0xFC, 0xFF, 0xFF, 0xFF, 0x89, 0x44, 0x24, 0x14, 0x8B, 0x00, 0x89, 0x84, 0x24, 0x18, 0x01, 0x00, 0x00, 0xBF, 0x90, 0xFD, 0xFF, 0xFF, 0xE8, 0x88, 0xFD, 0xFF, 0xFF, 0x8B, 0x8B, 0xF8, 0xFF, 0xFF, 0xFF, 0x66, 0x0F, 0xEF, 0xC0, 0x8B, 0xB3, 0xEC, 0xFF, 0xFF, 0xFF, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x66, 0x0F, 0x6E, 0x8C, 0x39, 0x70, 0x02, 0x00, 0x00, 0x66, 0x0F, 0x6E, 0x94, 0x39, 0x74, 0x02, 0x00, 0x00, 0x66, 0x0F, 0x60, 0xC8, 0x66, 0x0F, 0x61, 0xC8, 0x66, 0x0F, 0x60, 0xD0, 0x66, 0x0F, 0x61, 0xD0, 0xF3, 0x0F, 0x7F, 0x8C, 0xBE, 0xC0, 0x09, 0x00, 0x00, 0xF3, 0x0F, 0x7F, 0x94, 0xBE, 0xD0, 0x09, 0x00, 0x00, 0x83, 0xC7, 0x08, 0x75, 0xC7, 0xBA, 0x90, 0xFD, 0xFF, 0xFF, 0x8B, 0xBB, 0xF0, 0xFF, 0xFF, 0xFF, 0x89, 0x44, 0x24, 0x10, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x0F, 0xB6, 0x8C, 0x17, 0x70, 0x02, 0x00, 0x00, 0x39, 0x8C, 0x96, 0xC0, 0x09, 0x00, 0x00, 0x75, 0x20, 0x42, 0x75, 0xEC, 0x83, 0xEC, 0x04, 0x8D, 0x83, 0xC2, 0xDD, 0xFF, 0xFF, 0x8D, 0x8B, 0xA4, 0xDD, 0xFF, 0xFF, 0x50, 0x51, 0x6A, 0x02, 0xE8, 0xE4, 0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x10, 0xEB, 0x27, 0x83, 0xEC, 0x04, 0x8D, 0x83, 0xB0, 0xDD, 0xFF, 0xFF, 0x8D, 0x8B, 0xA4, 0xDD, 0xFF, 0xFF, 0x50, 0x51, 0x6A, 0x02, 0xE8, 0xC7, 0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x10, 0x8B, 0x83, 0xF4, 0xFF, 0xFF, 0xFF, 0xC7, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08, 0x89, 0xC2, 0x8B, 0x00, 0x83, 0xEC, 0x08, 0x8D, 0x8B, 0x05, 0xDE, 0xFF, 0xFF, 0x51, 0x52, 0xFF, 0x50, 0x18, 0x83, 0xC4, 0x10, 0x89, 0x44, 0x24, 0x08, 0x8B, 0x4D, 0x08, 0x8B, 0x09, 0x89, 0x4C, 0x24, 0x0C, 0x8D, 0x8B, 0x2A, 0xDE, 0xFF, 0xFF, 0x8D, 0x93, 0x16, 0xDE, 0xFF, 0xFF, 0x51, 0x52, 0x50, 0xFF, 0x75, 0x08, 0x8B, 0x44, 0x24, 0x1C, 0xFF, 0x90, 0xC4, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x50, 0xFF, 0x74, 0x24, 0x10, 0xFF, 0x75, 0x08, 0xE8, 0x87, 0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x10, 0x84, 0xC0, 0x74, 0x27, 0x83, 0xEC, 0x04, 0x8D, 0x83, 0x2E, 0xDE, 0xFF, 0xFF, 0x8D, 0x8B, 0xA4, 0xDD, 0xFF, 0xFF, 0x50, 0x51, 0x6A, 0x02, 0xE8, 0x48, 0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x10, 0x8B, 0x83, 0xF4, 0xFF, 0xFF, 0xFF, 0xC7, 0x00, 0x01, 0x00, 0x00, 0x00, 0x83, 0xEC, 0x04, 0x8D, 0x83, 0x46, 0xDE, 0xFF, 0xFF, 0x8D, 0x8B, 0xA4, 0xDD, 0xFF, 0xFF, 0x50, 0x89, 0x4C, 0x24, 0x10, 0x51, 0x6A, 0x02, 0xE8, 0x1D, 0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x10, 0xB8, 0x90, 0xFD, 0xFF, 0xFF, 0x90, 0x90, 0x90, 0x90, 0x90, 0x0F, 0xB6, 0x8C, 0x07, 0x70, 0x02, 0x00, 0x00, 0x39, 0x8C, 0x86, 0xC0, 0x09, 0x00, 0x00, 0x75, 0x1E, 0x40, 0x75, 0xEC, 0x83, 0xEC, 0x04, 0x8D, 0x83, 0xC2, 0xDD, 0xFF, 0xFF, 0x50, 0x8B, 0x74, 0x24, 0x10, 0x56, 0x6A, 0x02, 0xE8, 0xE6, 0xFB, 0xFF, 0xFF, 0x83, 0xC4, 0x10, 0xEB, 0x25, 0x83, 0xEC, 0x04, 0x8D, 0x83, 0xB0, 0xDD, 0xFF, 0xFF, 0x50, 0x8B, 0x74, 0x24, 0x10, 0x56, 0x6A, 0x02, 0xE8, 0xCB, 0xFB, 0xFF, 0xFF, 0x83, 0xC4, 0x10, 0x8B, 0x83, 0xF4, 0xFF, 0xFF, 0xFF, 0xC7, 0x00, 0x01, 0x00, 0x00, 0x00, 0x83, 0xEC, 0x08, 0x8D, 0x83, 0x60, 0xDE, 0xFF, 0xFF, 0x8D, 0x8B, 0x4E, 0xDE, 0xFF, 0xFF, 0x50, 0x51, 0xE8, 0xD6, 0xFB, 0xFF, 0xFF, 0x83, 0xC4, 0x10, 0x89, 0x44, 0x24, 0x0C, 0x85, 0xC0, 0x0F, 0x84, 0x8D, 0x00, 0x00, 0x00, 0x8D, 0x74, 0x24, 0x18, 0x8D, 0xBB, 0x62, 0xDE, 0xFF, 0xFF, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90};
#define APPNAME "DebugChecks"

void get_bytes();
void check_integrity();
inline void debug_check_proc_self_status();
inline void check_jdwp(JNIEnv* env);
//inline void DebugBreak();
inline void check_debugger_presence(JNIEnv* env);

/*
inline void DebugBreak() {
#if defined(__i386__)
    __asm__("int3");
    __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Breakpoint hit OK");
#endif
}
 */

void check_integrity() {
#if defined(__i386__)
    int i;
    for(i=0;i<128;i++) {
        if (bytes[i] != ref[i]) {
            __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Integrity failure");
            result = 1;
            //DebugBreak();
            return;
        }
    }
    __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Integrity OK");
#endif
}
inline void check_jdwp(JNIEnv* env) {
    jclass    cls_foo  = env->FindClass("android/os/Debug");
    jmethodID method_foo = env->GetStaticMethodID(cls_foo, "isDebuggerConnected",  "()Z");
    if (env->CallStaticBooleanMethod(cls_foo,method_foo)) {
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Debugger detected: JDWP");
        result = 1;
        //DebugBreak();
    }
    __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "JDWP OK");
}

//Native debugger
inline void debug_check_proc_self_status() {
    //integrityCheck_anti_brk();
    FILE * file;
    file = fopen ("/proc/self/status", "r");
    if ( file != NULL )
    {
        char line[256];
        char str[] = "TracerPid:\t0";
        while (fgets(line, sizeof line, file) != NULL)
        {
            if((strstr(line, str)) != NULL) {
                __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "/proc/self/status OK");
                return;
            }
        }
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Debugger detected: Status file");
        result = 1;
        fclose(file);
        //DebugBreak();
    }
}

inline void check_debugger_presence(JNIEnv* env) {
    clock_t t;
    t = clock();
    get_bytes();
    check_integrity();
    check_jdwp(env);
    check_integrity();
    debug_check_proc_self_status();
    t = clock() - t;
    double time_taken = ((double)t)/CLOCKS_PER_SEC; // in seconds
    if (time_taken > 2) {
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Debugger detected: Time");
        result = 1;
    }
    else {
        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "Time OK");
    }
    if (result) {
        exit(0);
    }
}

void get_bytes() {
    unsigned char (*ptr)() = reinterpret_cast<unsigned char (*)(void)>(check_debugger_presence);
    int i = 0;
    for(i=0;i<compsize;i++) {
        bytes[i] = *((unsigned char*)ptr+i);
    }
    //DebugBreak();
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_example_testjni_MainActivity_doDebugCheck(
        JNIEnv* env,
        jobject /* this */) {
    check_debugger_presence(env);
    return env->NewStringUTF("Debugger not detected");
}

